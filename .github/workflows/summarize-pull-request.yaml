name: Summarize pull request

on:
  workflow_call:
    outputs:
      summary:
        description: 'The summary of the pull request'
        value: ${{ jobs.summarize-pull-request.outputs.summary }}
jobs:
  summarize-pull-request:
    name: Summarize pull request
    runs-on: ubuntu-latest
    permissions: write-all
    outputs:
      summary: ${{ steps.pr-description.outputs.result }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Generate pull request description
        id: pr-description
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            const {data: commits} = await github.rest.pulls.listCommits(
              {
                pull_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo
              }
            );
            
            function formatCommitType(type) {
              const typeDictionary = {
                build: 'Build',
                ci: 'CI',
                docs: 'Documentation',
                feat: 'Feature',
                fix: 'Bug Fix',
                perf: 'Performance',
                refactor: 'Refactor',
                test: 'Testing',
                style: 'Style',
                other: 'Other'
              };
            
              const formattedType = typeDictionary[type.toLowerCase()] || type;
            
              return formattedType;
            }
            
            function formatCommits(commitsData) {
              const commitGroups = {"other": []};
          
              // Group commits by type
              for (const commit of commitsData) {
                const commitId = commit['sha'].substring(0, 7);
                const commitMessage = commit['commit']['message'];
                const regex = new RegExp("^(" + Object.keys(typeDictionary).join("|") +")(\(.*\))?:(.*)?");
                const match = commitMessage.match(regex);
                const commitWithLink = `[${commitId}](https://github.com/${commit['html_url']}): ${commitMessage}`;
                if (match) {
                  const type = match[1];
                  if (!commitGroups[type]) {
                    commitGroups[type] = [];
                  }
                  commitGroups[type].push(commitWithLink);
                } else {
                  commitGroups["other"].push(commitWithLink);
                }
              }
            
              // Generate the formatted string
              let output = '';
              for (const type in commitGroups) {
                if (commitGroups[type].length > 0) {
                  output += `## ${formatCommitType(type)}\n`;
                  for (const commit of commitGroups[type]) {
                    output += `- ${commit}\n`;
                  }
                }
              }
            
              return output;
            }
            
            const formattedCommits = formatCommits(commits);
            console.log(formattedCommits);    